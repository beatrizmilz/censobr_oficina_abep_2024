{
  "hash": "3ae4a35fb832985946629b2811491b6a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3. Microdados\"\nfrom: markdown+emoji\ncode-annotations: hover\n---\n\n\n\n\n# Dados disponíveis no {censobr}\n\nO pacote **{censobr}** disponibiliza microdados da amostra de todas as edições do censo demográfico desde 1970, e em breve também incluirá os dados de 1960 e 2022. A Tabela 1 apresenta abaixo todas as bases de dados do censo que você conseguie acessar com o **{censobr}**.\n\n**Tabela 1. Funções de dados disponíveis no {censobr}**\n\n\n\n\n```{=html}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <!-- <meta charset=\"UTF-8\"> -->\n  \n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        table, th, td {\n            border: 1px solid black; /* Thicker border for better visibility */\n        }\n        th, td {\n            padding: 10px;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n  <thead>\n    <tr>\n      <th rowspan=\"2\">Função</th>\n      <th rowspan=\"2\">Origem</th>\n      <th rowspan=\"2\">Unidade</th>\n      <th rowspan=\"2\">Definição</th>\n      <th colspan=\"6\">Disponibilidade</th>\n    </tr>\n    <tr>\n      <th>1960</th>\n      <th>70</th>\n      <th>80</th>\n      <th>91</th>\n      <th>2000</th>\n      <th>10</th>\n      <th>22</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>read_population()</td>\n      <td>Amostra</td>\n      <td>Microdado</td>\n      <td>Lê os microdados de pessoas.</td>\n      <td><i>em breve</i></td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td></td>\n      <td>X</td>\n      <td><i>em breve</i></td>\n    </tr>\n    <tr>\n      <td>read_households()</td>\n      <td>Amostra</td>\n      <td>Microdado</td>\n      <td>Lê os microdados de domicílios.</td>\n      <td><i>em breve</i></td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td><i>em breve</i></td>\n    </tr>\n    <tr>\n      <td>read_families()</td>\n      <td>Amostra</td>\n      <td>Microdado</td>\n      <td>Lê os microdados de famílias do censo de 2000.</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>X</td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>read_emigration()</td>\n      <td>Amostra</td>\n      <td>Microdado</td>\n      <td>Lê os microdados de emigração.</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>X</td>\n      <td></td>\n      <td><i>em breve</i></td>\n    </tr>\n    <tr>\n      <td>read_mortality()</td>\n      <td>Amostra</td>\n      <td>Microdado</td>\n      <td>Lê os microdados de mortalidade.</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>X</td>\n      <td></td>\n      <td><i>em breve</i></td>\n    </tr>\n    <tr>\n      <td>read_tracts()</td>\n      <td>Universo</td>\n      <td>Setor Censitário</td>\n      <td>Lê os dados do Universo agregados por setores censitários.</td>\n      <td></td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td></td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n  </tbody>\n</table>\n\n</body>\n</html>\n```\n\n\n\n\nTodas as funções de leitura de microdados possuem a mesma esturutra (sintaxe), o que permite o usuário baixar os dados de maneira fácil e intuitiva com um único comando. As funções possuem os seguintes parâmetros:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_households(\n  year,          # ano de referência\n  columns,       # seleciona colunas que devem ser lidas\n  add_labels,    # adiciona os 'labels' das variáveis categóricas\n  as_data_frame, # retorna resultado como um `Arrow DataSet` ou `data.frame`\n  showProgress,  # mostra contagem de download\n  cache          # salva arquivo em cache para rapida leitura posteriormente\n  )\n```\n:::\n\n\n\n\n\n::: {.callout-important appearance=\"default\"}\n## Cache local dos dados\n\nA primeira vez que o usuário executa uma função, o **{censobr}** fará o download dos dados e os armazenará localmente numa pasta do pacote. Dessa forma, os dados precisam ser baixados apenas uma vez. Mais informações na seção *Cache de Dados* abaixo.\n\n:::\n\n\n# Trabalhando com dados maior do que a RAM\n\n![](images/arrow_plus_dplyr.png){width=350 fig-align=\"right\"}\nÉ muito comum que os microdados do censo brasileiro sejam grandes demais para serem carregados na memória RAM dos usuários. Para resolver esse problema, o **{censobr}** foi construído sobre a plataforma [Arrow](https://arrow.apache.org/docs/r/) e arquivos em formato `.parquet`, o que permite que o usuário trabalhe de maneira eficiente até mesmo com bases de dados muito grandes utilizando funções já bem conhecidas do pacote [{dplyr}](https://arrow.apache.org/docs/r/articles/arrow.html#analyzing-arrow-data-with-dplyr).\n\n\nVamos então carregas as bibliotecas que vamos precisar e partir para exemplos na prática.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# carrega bibliotecas\nlibrary(censobr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'censobr' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(arrow)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'arrow' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n:::\n\n\n\n\n\n# Dados de população\n\nNeste exemplo, nós vamos criar um gráfico da pirâmica populacional do Brasil no ano de 2010. Primeiro, precisamos usar a função `read_population()` para carregar os microdados de população.\n\n\nO comportamento padrão das as funções do **{censobr}** é retornar *todas* as variáveis das bases de dados. No entanto, como vamos fazer uma análise simples, o mais eficiente é passarmos um vetor com os nomes das colunas que vamos utilizar (neste caso, as variáveis de região, peso amostral, sexo e idade).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- read_population(\n  year = 2010,\n  columns = c('name_region', 'V0010', 'V0601', 'V6036'),\n  add_labels = 'pt',    # <1>\n  showProgress = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nReading data cached locally.\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"arrow_dplyr_query\"\n```\n\n\n:::\n:::\n\n\n\n1. Adicionando os 'labels' em Português das variáveis categóricas.\n\n\nPor padrão, a saída da função é um `\"arrow_dplyr_query\"` ou `\"ArrowObject\"`. Isso permite que você trabalhe com os dados do censo de maneira super rápida e eficiente, mesmo que a tabela de dados seja grande demais para a memória do seu computador. Ao definir o parâmetro `as_data_frame = TRUE`, a função carregará os dados como um `data.frame` na memória RAM. ***Atenção***: isso pode fazer com que a sessão do R trave em ambientes com restrições computacionais.\n\nEsses outputs podem ser analisados como de maneira similar a como se analisaria um `data.frame` utilizando-se funções do pacote {dplyr}. Uma diferença, no entanto, é que as operações somente são executadas quando o usuário roda a função `dplyr::collect()` \n\nAqui, por exemplo, nós visualizamos as primeiras linhas da tabela de dados:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(pop) |> collect()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Potentially unsafe or invalid elements have been discarded from R metadata.\nℹ Type: \"externalptr\"\n→ If you trust the source, you can set `options(arrow.unsafe_metadata = TRUE)` to preserve them.\nPotentially unsafe or invalid elements have been discarded from R metadata.\nℹ Type: \"externalptr\"\n→ If you trust the source, you can set `options(arrow.unsafe_metadata = TRUE)` to preserve them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name_region    V0010     V0601 V6036\n1       Norte 8.705865 Masculino    22\n2       Norte 8.705865  Feminino    17\n3       Norte 9.818689 Masculino    38\n4       Norte 9.495608  Feminino    44\n5       Norte 9.495608 Masculino    11\n6       Norte 9.495608 Masculino    16\n```\n\n\n:::\n:::\n\n\n\n\nO próximo passo é criar um variável categória com grupos de idade a cada 5 anos.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- pop |>\n  mutate(\n    age_group = dplyr::case_when(\n      V6036 <= 04              ~ \"00-05\",\n      V6036 >= 05 & V6036 < 10 ~ \"05-10\",\n      V6036 >= 10 & V6036 < 15 ~ \"10-15\",\n      V6036 >= 15 & V6036 < 20 ~ \"15-20\",\n      V6036 >= 20 & V6036 < 25 ~ \"20-25\",\n      V6036 >= 25 & V6036 < 30 ~ \"25-30\",\n      V6036 >= 30 & V6036 < 35 ~ \"30-35\",\n      V6036 >= 35 & V6036 < 40 ~ \"35-40\",\n      V6036 >= 40 & V6036 < 45 ~ \"40-45\",\n      V6036 >= 45 & V6036 < 50 ~ \"45-50\",\n      V6036 >= 50 & V6036 < 55 ~ \"50-55\",\n      V6036 >= 55 & V6036 < 60 ~ \"55-60\",\n      V6036 >= 60 & V6036 < 65 ~ \"60-65\",\n      V6036 >= 65 & V6036 < 70 ~ \"65-70\",\n      V6036 >= 70              ~ \"75+\"\n      ))\n\nhead(pop) |> collect()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Potentially unsafe or invalid elements have been discarded from R metadata.\nℹ Type: \"externalptr\"\n→ If you trust the source, you can set `options(arrow.unsafe_metadata = TRUE)` to preserve them.\nPotentially unsafe or invalid elements have been discarded from R metadata.\nℹ Type: \"externalptr\"\n→ If you trust the source, you can set `options(arrow.unsafe_metadata = TRUE)` to preserve them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name_region    V0010     V0601 V6036 age_group\n1       Norte 8.705865 Masculino    22     20-25\n2       Norte 8.705865  Feminino    17     15-20\n3       Norte 9.818689 Masculino    38     35-40\n4       Norte 9.495608  Feminino    44     40-45\n5       Norte 9.495608 Masculino    11     10-15\n6       Norte 9.495608 Masculino    16     15-20\n```\n\n\n:::\n:::\n\n\n\n\nE em seguida, nós só precisamos somar o número de homens e mulheres em cada grupo de idade. Para isso, nós somamos os valores da variável de peso amostral `V0010` em cada um desses grupos.\n\nRepare que ao chamarmos a função `collect()`, o código é executado e retorna um `data.frame`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npiramide_df <- pop |>\n               group_by(V0601, age_group) |>\n               summarise(pop_count = sum(V0010)) |>\n               collect()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Potentially unsafe or invalid elements have been discarded from R metadata.\nℹ Type: \"externalptr\"\n→ If you trust the source, you can set `options(arrow.unsafe_metadata = TRUE)` to preserve them.\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(piramide_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   V0601 [2]\n  V0601     age_group pop_count\n  <chr>     <chr>         <dbl>\n1 Masculino 20-25      8627665.\n2 Feminino  15-20      8429180.\n3 Masculino 35-40      6767177.\n4 Feminino  40-45      6688525.\n5 Masculino 10-15      8727095.\n6 Masculino 15-20      8557608.\n```\n\n\n:::\n:::\n\n\n\nPronto, o último passo é só fazer o gráfico de pirâmide populacional utilizando o pacote {ggplot2}.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# remove grupo com idade missing `NA`\npiramide_df <- filter(piramide_df, !is.na(age_group))\n\n# transforma a contagem de mulheres para valores negativos\npiramide_df <- piramide_df |>\n  mutate(pop_count = if_else(V0601 == \"Masculino\", pop_count, -pop_count))\n\n# figura\nggplot(data = piramide_df,\n       aes(x = pop_count / 1000,\n           y = age_group,\n           fill = V0601)) +\n  geom_col() +\n  scale_fill_discrete(name=\"\", type=c(\"#ffcb69\",\"#437297\")) +\n  scale_x_continuous(labels = function(x){scales::comma(abs(x))},\n                     breaks = c(-8000, -4000,0,4000, 8000),\n                     name = \"População (em milhares)\") +\n  theme_classic() +\n  theme(\n    legend.position = \"top\",\n    axis.title.y=element_blank(),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n```\n\n::: {.cell-output-display}\n![Pirâmide demográfica, Brasil, 2010](3_microdados_files/figure-html/pop-pyramid-ggplot-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# Dados de domicílios\n\n\n### Using household data:\n\n#### Sewage coverage:\n\nIn this example, we are going to map the proportion of households connected to a sewage network in Brazilian municipalities First, we can easily download the households data set with the `read_households()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhs <- read_households(year = 2010, \n                      showProgress = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nDownloading data and storing it locally for future use.\n```\n\n\n:::\n:::\n\n\n\n\nNow we're going to (a) group observations by municipality, (b) get the number of households connected to a sewage network, (c) calculate the proportion of households connected, and (d) collect the results.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesg <- hs |> \n        compute() |>\n        group_by(code_muni) |>                                             # (a)\n        summarize(rede = sum(V0010[which(V0207=='1')]),                    # (b)\n                  total = sum(V0010)) |>                                   # (b)\n        mutate(cobertura = rede / total) |>                                # (c)\n        collect()                                                          # (d)\n\nhead(esg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  code_muni     rede  total cobertura\n      <int>    <dbl>  <dbl>     <dbl>\n1   1100015     0     7443.   0      \n2   1100023   182.   27654.   0.00660\n3   1100031     0     1979.   0      \n4   1100049 10019.   24413.   0.410  \n5   1100056     5.81  5399    0.00108\n6   1100064    28.9   6013.   0.00480\n```\n\n\n:::\n:::\n\n\n\n\n\n# Análise espacial com {geobr}\n![](images/geobr_logo_y.png){width=350 fig-align=\"right\"}\n\n***Note:*** all data sets in **{censobr}** are enriched with geography columns following the name standards of the [{geobr} package](https://github.com/ipeaGIT/geobr/) to help data manipulation and integration with spatial data from {geobr}. The added columns are: `c(‘code_muni’, ‘code_state’, ‘abbrev_state’, ‘name_state’, ‘code_region’, ‘name_region’, ‘code_weighting’)`.\n\nIn order to create a map with these values, we are going to use the [{geobr} package](https://ipeagit.github.io/geobr/) to download the geometries of Brazilian municipalities.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(geobr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required namespace: sf\n```\n\n\n:::\n\n```{.r .cell-code}\nmuni_sf <- geobr::read_municipality(year = 2010,\n                                    showProgress = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing year/date 2010\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(muni_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -63.61822 ymin: -13.6937 xmax: -60.33317 ymax: -9.66916\nGeodetic CRS:  SIRGAS 2000\n  code_muni             name_muni code_state abbrev_state\n1   1100015 Alta Floresta D'oeste         11           RO\n2   1100023             Ariquemes         11           RO\n3   1100031                Cabixi         11           RO\n4   1100049                Cacoal         11           RO\n5   1100056            Cerejeiras         11           RO\n6   1100064     Colorado Do Oeste         11           RO\n                            geom\n1 MULTIPOLYGON (((-62.2462 -1...\n2 MULTIPOLYGON (((-63.13712 -...\n3 MULTIPOLYGON (((-60.52408 -...\n4 MULTIPOLYGON (((-61.42679 -...\n5 MULTIPOLYGON (((-61.41347 -...\n6 MULTIPOLYGON (((-60.66352 -...\n```\n\n\n:::\n:::\n\n\n\n\nNow we only need to merge the spatial data with our estimates and map the results.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesg_sf <- left_join(muni_sf, esg, by = 'code_muni')\n\nggplot() +\n  geom_sf(data = esg_sf, aes(fill = cobertura), color=NA) +\n  labs(title = \"Share of households connected to a sewage network\") +\n  scale_fill_distiller(palette = \"Greens\", direction = 1, \n                       name='Share of\\nhouseholds', \n                       labels = scales::percent) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](3_microdados_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Spatial distribution of rents:\n\nIn this final example, we're going to visualize how the amount of money people spend on rent varies spatially across the metropolitan area of São Paulo.\n\nFirst, let's download the municipalities of the metro area of São Paulo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetro_muni <- geobr::read_metro_area(year = 2010, \n                                     showProgress = FALSE) |> \n              subset(name_metro == \"RM São Paulo\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing year/date 2010\n```\n\n\n:::\n:::\n\n\n\nWe also need the polygons of the weighting areas (áreas de ponderação). With the code below, we download all weighting areas in the state of São Paulo, and then keep only the ones in the metropolitan region of São Paulo.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwt_areas <- geobr::read_weighting_area(code_weighting = \"SP\", \n                                       showProgress = FALSE,\n                                       year = 2010)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing year/date 2010\n```\n\n\n:::\n\n```{.r .cell-code}\nwt_areas <- subset(wt_areas, code_muni %in% metro_muni$code_muni)\nhead(wt_areas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -46.73454 ymin: -23.64487 xmax: -46.64756 ymax: -23.53528\nGeodetic CRS:  SIRGAS 2000\n   code_weighting code_muni name_muni code_state abbrev_state code_region\n5   3550308005100   3550308 São Paulo         35           SP           3\n6   3550308005102   3550308 São Paulo         35           SP           3\n8   3550308005101   3550308 São Paulo         35           SP           3\n10  3550308005104   3550308 São Paulo         35           SP           3\n12  3550308005103   3550308 São Paulo         35           SP           3\n14  3550308005106   3550308 São Paulo         35           SP           3\n   name_region                           geom\n5      Sudeste MULTIPOLYGON (((-46.67201 -...\n6      Sudeste MULTIPOLYGON (((-46.67663 -...\n8      Sudeste MULTIPOLYGON (((-46.67257 -...\n10     Sudeste MULTIPOLYGON (((-46.70138 -...\n12     Sudeste MULTIPOLYGON (((-46.69581 -...\n14     Sudeste MULTIPOLYGON (((-46.73454 -...\n```\n\n\n:::\n:::\n\n\n\n\n\nNow we need to calculate the average rent spent in each weighting area. Using the national household data set, we're going to (a) filter only observations in our municipalities of interest, (b) group observations by weighting area, (c) calculate the average rent, and (d) collect the results.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrent <- hs |>\n        filter(code_muni %in% metro_muni$code_muni) |>                     # (a)\n        compute() |>\n        group_by(code_weighting) |>                                        # (b)\n        summarize(avgrent=weighted.mean(x=V2011, w=V0010, na.rm=TRUE)) |>  # (c)\n        collect()                                                          # (d)\n\nhead(rent)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  code_weighting avgrent\n  <chr>            <dbl>\n1 3503901003001     355.\n2 3503901003002     627.\n3 3503901003003     358.\n4 3505708005001     577.\n5 3505708005002     397.\n6 3505708005003     327.\n```\n\n\n:::\n:::\n\n\n\nFinally, we can merge the spatial data with our rent estimates and map the results.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrent_sf <- left_join(wt_areas, rent, by = 'code_weighting')\n\nggplot() +\n  geom_sf(data = rent_sf, aes(fill = avgrent), color=NA) +\n  geom_sf(data = metro_muni, color='gray', fill=NA) +\n  scale_fill_distiller(palette = \"Greens\", direction = 1, \n                       name='Avgerage\\nRent in R$') +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](3_microdados_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n# Data cache\n\nThe first time the user runs a function, **{censobr}** will download the file and store it locally. This way, the data only needs to be downloaded once. When the `cache` parameter is set to `TRUE` (Default), the function will read the cached data, which is much faster. \n\nUsers can manage the cached data sets using the `censobr_cache()` function. For example, users can:\n\nList cached files:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensobr_cache(list_files = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFiles currently chached:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_households_v0.3.0.parquet\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_population_v0.3.0.parquet\n```\n\n\n:::\n:::\n\n\n\n\nDelete a particular file:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensobr_cache(delete_file = \"2010_emigration\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe file '2010_emigration' is not cached.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFiles currently chached:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_households_v0.3.0.parquet\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_population_v0.3.0.parquet\n```\n\n\n:::\n:::\n\n\n\n\nDelete all files:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensobr_cache(delete_file = \"all\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAll files have been removed.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFiles currently chached:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_population_v0.3.0.parquet\n```\n\n\n:::\n:::\n\n\n\n\nBy default, **{censobr}** files are saved in the 'User' directory. However, users can run the function `set_censobr_cache_dir()` to set custom cache directory.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntempf <- tempdir()\n\nset_censobr_cache_dir(path = tempf)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}