[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "1. Introdução à oficina",
    "section": "",
    "text": "Este site apresenta o material de apoio para a oficina “{censobr}: Explorando o Censo Demográfico em R”. A oficina será realizada como parte da programação do 23o Encontro da ABEP, em Brasília, entre os dias 23 e 26 de setembro de 2024.\n\n\n\n\n\n\n\nResumo da oficina:\nO Censo Demográfico é uma das mais importantes fontes de dados sobre as características e condições de vida da população brasileira. Nessa oficina, você vai aprender como baixar e manipular os dados das diversas edições do censo demográfico do Brasil de 1970 a 2022 usando o pacote {censobr} na linguagem de programação R.\nA oficina também vai demonstrar como o {censobr} permite trabalhar com grandes bases de dados (larger-than-memory data) e ser integrado com o pacote {geobr} para visualização espacial de dados em diferentes escalas geográficas.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAqui você encontra alguns slides explicando o que a gente cobre o que a gente não cobre com nesta oficina:\n\n\n\n\n\n\n\n\n\nImportante\n\n\n\nEsta oficina assume que o participante tenha pelo menos um conhecimento básico da linguagem de programação R. Se você quiser se familiarizar com o R, recomendamos os livros abaixo:\n\nCiência de Dados em R\nR for Data Science\nGeocomputation with R\n\n\n\n\n\nSugestões de leitura:\nLeitura adicional relevante, mas não essencial para a oficina.\n\nO site e documentação do pacote {censobr}.\nO site e documentação do pacote {geobr}.\n\n\n\nSobre os instrutores:\nRafael H. M. Pereira  Coordenador de Ciência de Dados  Instituto de Pesquisa Econômica Aplicada (Ipea)  Website | Google Scholar | Twitter | Linkedin |\nRogério Barbosa  Professor de Sociologia  Instituto de Estudos Sociais e Políticos (IESP) da Universidade do Estado do Rio de Janeiro (UERJ)  Website | Google Scholar | Twitter | Linkedin |\n\nBio dos instrutors:\nRafael H. M. Pereira é pesquisador sênior nas áreas de planejamento urbano, ciência de dados espaciais e mobilidade urbana no Instituto de Pesquisa Econômica Aplicada (Ipea). Sua pesquisa investiga como as políticas urbanas e tecnologias moldam a organização espacial das cidades, a mobilidade humana, bem como seus impactos nas desigualdades sociais e de saúde. Algumas de suas contribuições nos campos de urban analytics e planejamento envolvem o desenvolvimento de novos métodos e ferramentas computacionais de código aberto para o estudo de sistemas urbanos e redes de transporte. Essas contribuições partem de interesses substantivos sobre questões de equidade no planejamento urbano, desigualdades de acesso a oportunidades, e dos impactos ambientais do ambiente construído e de padrões de mobilidade. Com graduação em sociologia pela UnB e mestrado em demografia pela Unicamp, Rafael Pereira obteve seu PhD em geografia pela Universidade de Oxford.\nRogério Barbosa é Professor de Sociologia do Instituto de Estudos Sociais e Políticos (IESP) da Universidade do Estado do Rio de Janeiro (UERJ), atuando nas áreas de Métodos Quantitativos e Estratificação Social. Formou-se bacharel em Ciências Sociais pela UFMG, mestre e doutor em Sociologia pela Universidade de São Paulo (2017). Realizou estágio pos-doutoral em Ciência Política pela USP e foi visiting scholar no Departamento de Sociologia da Columbia University. É pesquisador associado do Centro de Estudos da Metrópole (CEM-USP), affiliated scholar no Brazil Lad da Princeton University e membro da Rede de Pesquisa Solidária Políticas Públicas e Sociedade. Trabalhou como consultor metodológico de diversos grupos de pesquisa e também ministrou diversos cursos de programação e métodos estatísticos para instituições e universidades no Brasil. Atualmente pesquisa as tendências de longo prazo da desigualdade de renda no Brasil, usando levantamentos históricos e dados administrativos, bem como microdados contemporâneos. Desenvolve também pacotes R (código aberto) para pesquisa social e ferramentas para facilitar o acesso aos dados brasileiros para um público mais amplo.",
    "crumbs": [
      "1. Introdução à oficina"
    ]
  },
  {
    "objectID": "4_agregados_setores.html",
    "href": "4_agregados_setores.html",
    "title": "4. Agregados dos Setores Censitários",
    "section": "",
    "text": "t\n1+3\n\n[1] 4\nPerhaps the most commonly used datasets from Brazilian censuses are the microdata of individuals and households. Nonetheless, IBGE also makes available some extremely data on population and environmental characteristics aggregated at the census tract level. In this vignette, we show how to use the censobr package to easily access census tract-level data using the read_tracts() function.\nAt the moment, this function only includes data from the 2010 census.",
    "crumbs": [
      "4. Agregados dos Setores Censitários"
    ]
  },
  {
    "objectID": "4_agregados_setores.html#dictionary-of-variables",
    "href": "4_agregados_setores.html#dictionary-of-variables",
    "title": "4. Agregados dos Setores Censitários",
    "section": "Dictionary of variables",
    "text": "Dictionary of variables\nTo check the meaning of each variable, users can run the data_dictionary(), which will open on the browser an .html or .pdf file with the dictionary of variables in each dataset\n\ndata_dictionary(year = 2010, dataset = 'tracts')",
    "crumbs": [
      "4. Agregados dos Setores Censitários"
    ]
  },
  {
    "objectID": "4_agregados_setores.html#example-1-spatial-distribution-of-income",
    "href": "4_agregados_setores.html#example-1-spatial-distribution-of-income",
    "title": "4. Agregados dos Setores Censitários",
    "section": "Example 1: Spatial distribution of income",
    "text": "Example 1: Spatial distribution of income\nIn this first example we’ll be creating a map of the spatial distribution of average income per capita. We can find the information on the the total number of residents in each census tract in the \"Basico\" dataset, variable \"V002\". Meanwhile, the information on income can be found in the \"DomicilioRenda\" dataset, variable \"V003\".\nUsing the code below, we download the data and calculate the income per capita of all census tracts in Brazil.\n\n# download data\ntract_basico &lt;- read_tracts(year = 2010,\n                            dataset = \"Basico\", \n                            showProgress = FALSE)\n\nReading data cached locally.\n\ntract_income &lt;- read_tracts(year = 2010,\n                            dataset = \"DomicilioRenda\", \n                            showProgress = FALSE)\n\nReading data cached locally.\n\n# select columns\ntract_basico &lt;- tract_basico |&gt; select('code_tract','V002')\ntract_income &lt;- tract_income |&gt; select('code_tract','V003')\n\n# merge\ntracts_df &lt;- left_join(tract_basico, tract_income) |&gt; collect()\n\n# calculate income per capita\ntracts_df &lt;- tracts_df |&gt; mutate(income_pc = V003 / V002)\nhead(tracts_df)\n\n        code_tract  V002   V003 income_pc\n            &lt;char&gt; &lt;num&gt;  &lt;num&gt;     &lt;num&gt;\n1: 120001305000001   957 601805  628.8454\n2: 120001305000002  1203 385033  320.0607\n3: 120001305000003  1700 531794  312.8200\n4: 120001305000004   182  58853  323.3681\n5: 120001305000005   305 112979  370.4230\n6: 120001305000006   483 263538  545.6273\n\n\nFinally, we can merge the spatial data with our per capita income estimates and map the results.\n\nbh_tracts &lt;- left_join(tracts_sf, tracts_df, by = 'code_tract')\n\nggplot() +\n  geom_sf(data = bh_tracts, aes(fill = income_pc), color=NA) +\n  geom_sf(data = muni_bh, color='gray10', fill=NA) +\n  labs(subtitle = 'Avgerage income per capita.\\nBelo Horizonte, 2010') +\n  scale_fill_viridis_c(name = \"Income per\\ncapita (R$)\",\n                       labels = scales::number_format(),\n                       option = 'cividis',\n                       breaks = c(0, 500, 1e3, 5e3, 1e4, 2e4),\n                       trans = \"pseudo_log\", na.value = \"gray90\") +\n  theme_void()",
    "crumbs": [
      "4. Agregados dos Setores Censitários"
    ]
  },
  {
    "objectID": "4_agregados_setores.html#example-2",
    "href": "4_agregados_setores.html#example-2",
    "title": "4. Agregados dos Setores Censitários",
    "section": "Example 2:",
    "text": "Example 2:\nIn this second example, we are going to map the proportion of households with the presence of trees in their surroundings. To do this, we need to download the \"Entorno\" dataset and sum the variables entorno01_V044 + entorno01_V046 + entorno01_V048.\n\n# download data\ntract_entorno &lt;- read_tracts(year = 2010,\n                             dataset = \"Entorno\", \n                             showProgress = FALSE)\n\nReading data cached locally.\n\n# filter observations and calculate indicator\ndf_trees &lt;- tract_entorno |&gt;\n                  filter(code_tract %in% tracts_sf$code_tract) |&gt;\n                  mutate(total_households = entorno01_V001,\n                         trees = entorno01_V044 + entorno01_V046 + entorno01_V048,\n                         trees_prop = trees / total_households) |&gt;\n                  select(code_tract, total_households, trees, trees_prop) |&gt;\n                  collect()\n\nhead(df_trees)\n\n        code_tract total_households trees trees_prop\n            &lt;char&gt;            &lt;num&gt; &lt;num&gt;      &lt;num&gt;\n1: 310620005620001              212   212  1.0000000\n2: 310620005620002              189   189  1.0000000\n3: 310620005620003              295   291  0.9864407\n4: 310620005620004              226   200  0.8849558\n5: 310620005620005              295   295  1.0000000\n6: 310620005620006              301   299  0.9933555\n\n\nNow we can merge the spatial data with our indicator and see how the presence of trees in the surroundings of households varies spatially.\n\nbh_tracts &lt;- left_join(tracts_sf, df_trees, by = 'code_tract')\n\nggplot() +\n  geom_sf(data = bh_tracts, aes(fill = trees_prop), color=NA) +\n  geom_sf(data = muni_bh, color='gray10', fill=NA) +\n  labs(subtitle = 'Share of households with trees in their surroundings.\\nBelo Horizonte, 2010') +\n  scale_fill_distiller(palette = \"Greens\", direction = 1, \n                       name='Share of\\nhouseholds', \n                       na.value = \"gray90\",\n                       labels = scales::percent) +\n  theme_void()",
    "crumbs": [
      "4. Agregados dos Setores Censitários"
    ]
  },
  {
    "objectID": "2.2_info_censo.html",
    "href": "2.2_info_censo.html",
    "title": "2.2 Conceitos iniciais",
    "section": "",
    "text": "O censo demográfico brasileiro é a principal pesquisa populacional realizada no Brasil, conduzida pelo Instituto Brasileiro de Geografia e Estatística (IBGE). Trata-se da pesquisa de maior cobertura territorial do país, e que levanta informações sobre as características e condições de vida da população brasileira nos mais diversos temas, como perfil demográfico, educação, trabalho, fecundidade, migração, condições de moradia, etc.\nNesta seção, nós revisamos alguns conceitos básicos sobre a organização dos censo demográficos no Brasil.",
    "crumbs": [
      "2. Informações gerais",
      "2.2 Conceitos iniciais"
    ]
  },
  {
    "objectID": "2.2_info_censo.html#setores-censitários",
    "href": "2.2_info_censo.html#setores-censitários",
    "title": "2.2 Conceitos iniciais",
    "section": "Setores censitários",
    "text": "Setores censitários\n\nOs cetores censitários são a menor unidade de análise espacial nas pesquisas domiciliares do IBGE. Um setor é uma unidade territorial demarcada para fins operacionais de organizar a coleta de dados. Cada setor é coberto por um único recenseador e possui em média, cerca de 200 domicílios. No entanto, este número, assim como a o tamanho do setor podem variar a depender da densidade demográfica de cada região. Os dados do universo são disponibilizados apenas no formato agregado por setores censitários.\n\n\nÁreas de ponderação\n\nAs áreas de ponderação são a menor unidade espacial para a qual os dados da pesquisa amostral possuem representatividade estatística. Essas áras são constituídas por agrupamentos de setores censitários contíguos, mas que também variam de acordo com a densidade demográfica de cada região. Para o Censo de 2010, o IBGE estabeleceu que uma área de ponderação deveria ter, no mínimo, 400 domicílios ocupados na amostra. Em regiões menos densamente povoadas, essas áreas acabam ocupando uma larga extensão territorial.\n\n\n\nCode\nlibrary(geobr)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(sf)\n\n# codigo do municipio de Belford Roxo\nmymuni &lt;- 3300456\n\n# baixa geometria do municipio\nmuni &lt;- geobr::read_municipality(mymuni)\n\n# baixa geometria das areas de ponderacao\nap &lt;- geobr::read_weighting_area(code_weighting = mymuni, \n                                 year = 2010, \n                                 simplified = F)\n\n# baixa geometria dos setores censitarios\nct &lt;- geobr::read_census_tract(code_tract = mymuni, \n                               year = 2010, \n                               simplified = FALSE)\n\n# funcao para 'inclinar' mapa\nrotate_data_geom &lt;- function(data, x_add = 0, y_add = 0) {\n  shear_matrix &lt;- function(){ matrix(c(2, 1.2, 0, 1), 2, 2) }\n  \n  rotate_matrix &lt;- function(x) { \n    matrix(c(cos(x), sin(x), -sin(x), cos(x)), 2, 2) \n  }\n  dplyr::mutate(data,\n    geom = geom * shear_matrix() * rotate_matrix(pi/20) + c(x_add, y_add)\n    )\n}\n\n\n# annotate parameters\nx = -116.03\nclr = 'gray40'\nsz = 4\n\n# MAP\ntemp1  &lt;- ggplot() +\n  # municipio\n  geom_sf(data = rotate_data_geom(data = muni, y_add = .01),\n          color='gray30', fill='#FCDE70', show.legend = FALSE) +\n  annotate(\"text\", label='Município', x=x, y=-4.59,\n           hjust = 0, color=clr, size=sz) +\n  \n  # areas de ponderacao\n  geom_sf(data = rotate_data_geom(data = ap, y_add = .07), \n          fill='#ff7b7b', color='#ff0000', show.legend = FALSE) +\n  annotate(\"text\", label='Áreas de\\nPonderação', x=x, y= -4.53,\n           hjust = 0, color=clr, size=sz) +\n\n  # setores censitarios\n  geom_sf(data = rotate_data_geom(data = ct, y_add = 0.13),\n          color='gray30', fill='gray98', show.legend = FALSE) +\n  annotate(\"text\", label='Setores\\nCensitários', x=x, y= -4.47, \n           hjust = 0, color=clr, size=sz) +\n  coord_sf(xlim = c(-116.305, -115.98)) +\n  theme_void() +\n  theme(plot.background = element_rect(fill = 'white', color='white'))\n\ntemp1\n# ggsave(temp1, filename = 'fig_spatial_layers.png', \n#        width = 12, height = 8, units = 'cm', dpi = 300)",
    "crumbs": [
      "2. Informações gerais",
      "2.2 Conceitos iniciais"
    ]
  },
  {
    "objectID": "2.1_instalacao.html",
    "href": "2.1_instalacao.html",
    "title": "2.1 Instalação",
    "section": "",
    "text": "Para acompanhar a oficina, você deve ter os seguintes programas instalados em sua máquina antes do dia do workshop\n\nR e RStudio\nAlguns pacotes de R\n\nInstruções abaixo:\n\n\n\n\nInstalando R e RStudio\nNesta oficina, a gente pressupõe que você já tenha o R e o RStudio instalados em sua máquina. Caso ainda precise instalar esses programas, siga estras instruções.\n\n\nInstalando pacotes de R\nA oficina utiliza alguns pacotes do R que precisam ser instalados em sua máquina. A maneira mais simples de fazer isso é executando o código abaixo. Isso pode levar alguns minutos, caso seja a primeira vez que você instala esses pacotes.\n\npkgs &lt;- c(\n  'censobr',\n  'geobr',\n  'arrow',\n  'dplyr',\n  'ggplot2'\n  )\n\ninstall.packages(pkgs)\n\nA maneira mais segura de replicar o código desta oficina, no entanto, é clonando o seu repositório localmente. Isso porque este repositório utiliza o pacote {renv}do R para gerenciar as dependências dos pacotes utilizados na oficina. Isso é importante para garantir que estamos utilizando as mesmas versões dos pacotes relevantes.\nUma vez que você clonou o repositório e abriu o arquivo censobr_oficina_abep_2024.Rproj, basta você rodar renv::restore() para instalar todos os pacotes utilizados nesta oficina.\n\n# Descomente a linha abaixo caso precise instalar o pacote {renv}\n# install.packages('renv')\nrenv::restore()",
    "crumbs": [
      "2. Informações gerais",
      "2.1 Instalação"
    ]
  },
  {
    "objectID": "3_microdados.html",
    "href": "3_microdados.html",
    "title": "3. Microdados",
    "section": "",
    "text": "Dados disponíveis no {censobr}\nO pacote {censobr} disponibiliza microdados da amostra de todas as edições do censo demográfico desde 1970. A Tabela 1 apresenta abaixo todas as bases de dados do censo que você consegue acessar com o {censobr}.\nTabela 1. Funções de dados disponíveis no {censobr}\n  \n    \n    \n\n\n\nFunção\nOrigem\nUnidade\nDefinição\nDisponibilidade\n\n\n\n1960\n70\n80\n91\n2000\n10\n22\n\n\n\n\nread_population()\nAmostra\nMicrodado\nLê os microdados de pessoas.\nem breve\nX\nX\nX\n\nX\nem breve\n\n\nread_households()\nAmostra\nMicrodado\nLê os microdados de domicílios.\nem breve\nX\nX\nX\nX\nX\nem breve\n\n\nread_families()\nAmostra\nMicrodado\nLê os microdados de famílias do censo de 2000.\n\n\n\nX\n\n\n\n\n\nread_emigration()\nAmostra\nMicrodado\nLê os microdados de emigração.\n\n\n\n\nX\n\nem breve\n\n\nread_mortality()\nAmostra\nMicrodado\nLê os microdados de mortalidade.\n\n\n\n\n\nX\nem breve\n\n\nread_tracts()\nUniverso\nSetor Censitário\nLê os dados do Universo agregados por setores censitários.\n\n\n\n\n\nX\nem breve\n\n\n\nTodas as funções de leitura de microdados possuem a mesma estrutra (sintaxe), o que permite o usuário baixar os dados de maneira fácil e intuitiva com um único comando. As funções possuem os seguintes parâmetros:\n\nread_households(\n  year,          # ano de referência\n  columns,       # seleciona colunas que devem ser lidas\n  add_labels,    # adiciona os 'labels' das variáveis categóricas\n  as_data_frame, # retorna resultado como um `Arrow DataSet` ou `data.frame`\n  showProgress,  # mostra contagem de download\n  cache          # salva arquivo em cache para rapida leitura posteriormente\n  )\n\n\n\n\n\n\n\nCache local dos dados\n\n\n\nA primeira vez que o usuário executa uma função, o {censobr} fará o download dos dados e os armazenará localmente numa pasta do pacote. Dessa forma, os dados precisam ser baixados apenas uma vez. Mais informações na seção Cache de Dados abaixo.\n\n\n\n\nTrabalhando com dados maior do que a RAM\n\n\n\n\n\nÉ muito comum que os microdados do censo brasileiro sejam grandes demais para serem carregados na memória RAM do usuário. Para resolver esse problema, o {censobr} foi construído sobre a plataforma Arrow e arquivos em formato .parquet, o que permite que o usuário trabalhe de maneira eficiente até mesmo com bases de dados muito grandes utilizando funções já bem conhecidas do pacote {dplyr}.\nVamos então partir para exemplos na prática, e começar carregando as bibliotecas que usamos.\n\n# carrega bibliotecas\nlibrary(censobr)\n\nWarning: package 'censobr' was built under R version 4.3.3\n\nlibrary(arrow)\n\nWarning: package 'arrow' was built under R version 4.3.3\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\n\nDados de população\nNeste exemplo, nós vamos criar um gráfico da pirâmica populacional do Brasil no ano de 2010. O primeiro passo é usar a função read_population() para carregar os microdados de população.\nO comportamento padrão das as funções do {censobr} é retornar todas as variáveis das bases de dados. No entanto, como vamos fazer uma análise simples, o mais eficiente é passarmos um vetor com os nomes das colunas que vamos utilizar (neste caso, as variáveis de peso amostral, sexo e idade).\n\npop &lt;- read_population(\n  year = 2010,\n1  columns = c('V0010', 'V0601', 'V6036'),\n2  add_labels = 'pt',\n  showProgress = TRUE\n  )\n\n\n1\n\nAumentando eficiência ao ler apenas as colunas que vamos usar\n\n2\n\nAdicionando os ‘labels’ em Português das variáveis categóricas.\n\n\n\n\nReading data cached locally.\n\nclass(pop)\n\n[1] \"arrow_dplyr_query\"\n\n\nPor padrão, a saída da função é um \"arrow_dplyr_query\" ou \"ArrowObject\". Isso permite que você trabalhe com os dados do censo de maneira super rápida e eficiente, mesmo que a tabela de dados seja grande demais para a memória do seu computador. Note que se você passar o parâmetro as_data_frame = TRUE, a função carregará os dados como um data.frame na memória RAM. Atenção: isso pode fazer com que a sessão do R trave em ambientes com restrições computacionais.\nEsse output em arrow pode ser analisado como de maneira similar a como se analisaria um data.frame utilizando-se funções do pacote {dplyr}. Uma diferença, no entanto, é que as operações somente são executadas quando o usuário roda a função dplyr::collect()\nAqui, por exemplo, nós visualizamos as primeiras linhas da tabela de dados:\n\nhead(pop) |&gt; collect()\n\nWarning: Potentially unsafe or invalid elements have been discarded from R metadata.\nℹ Type: \"externalptr\"\n→ If you trust the source, you can set `options(arrow.unsafe_metadata = TRUE)` to preserve them.\nPotentially unsafe or invalid elements have been discarded from R metadata.\nℹ Type: \"externalptr\"\n→ If you trust the source, you can set `options(arrow.unsafe_metadata = TRUE)` to preserve them.\n\n\n     V0010     V0601 V6036\n1 8.705865 Masculino    22\n2 8.705865  Feminino    17\n3 9.818689 Masculino    38\n4 9.495608  Feminino    44\n5 9.495608 Masculino    11\n6 9.495608 Masculino    16\n\n\nO próximo passo é criar um variável categória com grupos de idade a cada 5 anos.\n\npop &lt;- pop |&gt;\n  mutate(\n    age_group = dplyr::case_when(\n      V6036 &lt;= 04              ~ \"00-05\",\n      V6036 &gt;= 05 & V6036 &lt; 10 ~ \"05-10\",\n      V6036 &gt;= 10 & V6036 &lt; 15 ~ \"10-15\",\n      V6036 &gt;= 15 & V6036 &lt; 20 ~ \"15-20\",\n      V6036 &gt;= 20 & V6036 &lt; 25 ~ \"20-25\",\n      V6036 &gt;= 25 & V6036 &lt; 30 ~ \"25-30\",\n      V6036 &gt;= 30 & V6036 &lt; 35 ~ \"30-35\",\n      V6036 &gt;= 35 & V6036 &lt; 40 ~ \"35-40\",\n      V6036 &gt;= 40 & V6036 &lt; 45 ~ \"40-45\",\n      V6036 &gt;= 45 & V6036 &lt; 50 ~ \"45-50\",\n      V6036 &gt;= 50 & V6036 &lt; 55 ~ \"50-55\",\n      V6036 &gt;= 55 & V6036 &lt; 60 ~ \"55-60\",\n      V6036 &gt;= 60 & V6036 &lt; 65 ~ \"60-65\",\n      V6036 &gt;= 65 & V6036 &lt; 70 ~ \"65-70\",\n      V6036 &gt;= 70              ~ \"75+\"\n      ))\n\nhead(pop) |&gt; collect()\n\nWarning: Potentially unsafe or invalid elements have been discarded from R metadata.\nℹ Type: \"externalptr\"\n→ If you trust the source, you can set `options(arrow.unsafe_metadata = TRUE)` to preserve them.\nPotentially unsafe or invalid elements have been discarded from R metadata.\nℹ Type: \"externalptr\"\n→ If you trust the source, you can set `options(arrow.unsafe_metadata = TRUE)` to preserve them.\n\n\n     V0010     V0601 V6036 age_group\n1 8.705865 Masculino    22     20-25\n2 8.705865  Feminino    17     15-20\n3 9.818689 Masculino    38     35-40\n4 9.495608  Feminino    44     40-45\n5 9.495608 Masculino    11     10-15\n6 9.495608 Masculino    16     15-20\n\n\nE em seguida, nós só precisamos somar o número de homens e mulheres em cada grupo de idade. Para isso, nós somamos os valores da variável de peso amostral V0010 em cada grupo. Repare que ao chamarmos a função collect(), o código é executado e retorna um data.frame.\n\npiramide_df &lt;- pop |&gt;\n               group_by(V0601, age_group) |&gt;\n               summarise(pop_count = sum(V0010)) |&gt;\n               collect()\n\nWarning: Potentially unsafe or invalid elements have been discarded from R metadata.\nℹ Type: \"externalptr\"\n→ If you trust the source, you can set `options(arrow.unsafe_metadata = TRUE)` to preserve them.\n\nhead(piramide_df)\n\n# A tibble: 6 × 3\n# Groups:   V0601 [2]\n  V0601     age_group pop_count\n  &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;\n1 Masculino 20-25      8627665.\n2 Feminino  15-20      8429180.\n3 Masculino 35-40      6767177.\n4 Feminino  40-45      6688525.\n5 Masculino 10-15      8727095.\n6 Masculino 15-20      8557608.\n\n\nPronto, no último passo é só fazer o gráfico de pirâmide populacional utilizando o pacote {ggplot2}.\n\n\nCode\n# remove grupo com idade missing `NA`\npiramide_df &lt;- filter(piramide_df, !is.na(age_group))\n\n# transforma a contagem de mulheres para valores negativos\npiramide_df &lt;- piramide_df |&gt;\n  mutate(pop_count = if_else(V0601 == \"Masculino\", pop_count, -pop_count))\n\n# figura\nggplot(data = piramide_df,\n       aes(x = pop_count / 1000,\n           y = age_group,\n           fill = V0601)) +\n  geom_col() +\n  scale_fill_discrete(name=\"\", type=c(\"#ffcb69\",\"#437297\")) +\n  scale_x_continuous(labels = function(x){scales::comma(abs(x))},\n                     breaks = c(-8000, -4000,0,4000, 8000),\n                     name = \"População (em milhares)\") +\n  theme_classic() +\n  theme(\n    legend.position = \"top\",\n    axis.title.y=element_blank(),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n\n\n\n\nPirâmide demográfica, Brasil, 2010\n\n\n\n\n\n\nDados de domicílios\n\nSewage coverage:\nNeste exemplo, nós vamos usar os dados de domicílios do censo de 2010 para calcular qual proporção de domicílios conectados com rede de esgoto nos municípios brasileiros. O primeiro passo é baixar os dados utilizando a função read_households().\n\nhs &lt;- read_households(year = 2010, \n                      showProgress = FALSE)\n\nReading data cached locally.\n\n\nAgora vamos (a) agrupar as observações por município, (b) obter o número de domicílios conectados à rede de esgoto, (c) calcular a proporção de domicílios conectados e (d) coletar os resultados.\n\nesg &lt;- hs |&gt; \n        compute() |&gt;\n        group_by(code_muni) |&gt;                                             # (a)\n        summarize(rede = sum(V0010[which(V0207=='1')]),                    # (b)\n                  total = sum(V0010)) |&gt;                                   # (b)\n        mutate(cobertura = rede / total) |&gt;                                # (c)\n        collect()                                                          # (d)\n\nhead(esg)\n\n# A tibble: 6 × 4\n  code_muni     rede  total cobertura\n      &lt;int&gt;    &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n1   1100015     0     7443.   0      \n2   1100023   182.   27654.   0.00660\n3   1100031     0     1979.   0      \n4   1100049 10019.   24413.   0.410  \n5   1100056     5.81  5399    0.00108\n6   1100064    28.9   6013.   0.00480\n\n\n\n\n\nAnálise espacial com {geobr}\n Nota: Todos os conjuntos de dados no {censobr} são enriquecidos com colunas de geografia, seguindo os padrões de nomenclatura do pacote {geobr} package para facilitar a manipulação e a integração de dados espaciais com os dados do {geobr}. As colunas adicionadas são: c(‘code_muni’, ‘code_state’, ‘abbrev_state’, ‘name_state’, ‘code_region’, ‘name_region’, ‘code_weighting’).\nPara criar um mapa com esses valores, vamos usar o pacote {geobr} package para baixar as geometrias dos municípios brasileiros.\n\nlibrary(geobr)\n\nLoading required namespace: sf\n\nmuni_sf &lt;- geobr::read_municipality(year = 2010,\n                                    showProgress = FALSE)\n\nUsing year/date 2010\n\nhead(muni_sf)\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -63.61822 ymin: -13.6937 xmax: -60.33317 ymax: -9.66916\nGeodetic CRS:  SIRGAS 2000\n  code_muni             name_muni code_state abbrev_state\n1   1100015 Alta Floresta D'oeste         11           RO\n2   1100023             Ariquemes         11           RO\n3   1100031                Cabixi         11           RO\n4   1100049                Cacoal         11           RO\n5   1100056            Cerejeiras         11           RO\n6   1100064     Colorado Do Oeste         11           RO\n                            geom\n1 MULTIPOLYGON (((-62.2462 -1...\n2 MULTIPOLYGON (((-63.13712 -...\n3 MULTIPOLYGON (((-60.52408 -...\n4 MULTIPOLYGON (((-61.42679 -...\n5 MULTIPOLYGON (((-61.41347 -...\n6 MULTIPOLYGON (((-60.66352 -...\n\n\nAgora só precisamos unir os dados espaciais com nossas estimativas e mapear os resultados.\n\nesg_sf &lt;- left_join(muni_sf, esg, by = 'code_muni')\n\nggplot() +\n  geom_sf(data = esg_sf, aes(fill = cobertura), color=NA) +\n  labs(title = \"Share of households connected to a sewage network\") +\n  scale_fill_distiller(palette = \"Greens\", direction = 1, \n                       name='Share of\\nhouseholds', \n                       labels = scales::percent) +\n  theme_void()\n\n\n\n\n\n\n\n\n\nDistribuição espacial do valor do aluguel:\nNeste exemplo final, vamos visualizar como a quantidade de dinheiro que as pessoas gastam com aluguel varia espacialmente pela região metropolitana de São Paulo. Primeiro, vamos baixar os municípios da região metropolitana de São Paulo com o {geobr}.\n\nmetro_muni &lt;- geobr::read_metro_area(year = 2010, \n                                     showProgress = FALSE) |&gt; \n              subset(name_metro == \"RM São Paulo\")\n\nUsing year/date 2010\n\n\nTambém precisamos dos polígonos das áreas de ponderação. Com o código abaixo, baixamos todas as áreas de ponderação do estado de São Paulo e, em seguida, mantemos apenas aquelas na região metropolitana de São Paulo.\n\nwt_areas &lt;- geobr::read_weighting_area(code_weighting = \"SP\", \n                                       showProgress = FALSE,\n                                       year = 2010)\n\nUsing year/date 2010\n\nwt_areas &lt;- subset(wt_areas, code_muni %in% metro_muni$code_muni)\nhead(wt_areas)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -46.73454 ymin: -23.64487 xmax: -46.64756 ymax: -23.53528\nGeodetic CRS:  SIRGAS 2000\n   code_weighting code_muni name_muni code_state abbrev_state code_region\n5   3550308005100   3550308 São Paulo         35           SP           3\n6   3550308005102   3550308 São Paulo         35           SP           3\n8   3550308005101   3550308 São Paulo         35           SP           3\n10  3550308005104   3550308 São Paulo         35           SP           3\n12  3550308005103   3550308 São Paulo         35           SP           3\n14  3550308005106   3550308 São Paulo         35           SP           3\n   name_region                           geom\n5      Sudeste MULTIPOLYGON (((-46.67201 -...\n6      Sudeste MULTIPOLYGON (((-46.67663 -...\n8      Sudeste MULTIPOLYGON (((-46.67257 -...\n10     Sudeste MULTIPOLYGON (((-46.70138 -...\n12     Sudeste MULTIPOLYGON (((-46.69581 -...\n14     Sudeste MULTIPOLYGON (((-46.73454 -...\n\n\nAgora precisamos calcular o valor médio do aluguel gasto em cada área de ponderação. Utilizando o conjunto de dados da pesquisa domiciliar nacional, vamos (a) filtrar apenas as observações nos nossos municípios de interesse, (b) agrupar as observações por área de ponderação, (c) calcular o valor médio do aluguel e (d) coletar os resultados.\n\nrent &lt;- hs |&gt;\n        filter(code_muni %in% metro_muni$code_muni) |&gt;                     # (a)\n        compute() |&gt;\n        group_by(code_weighting) |&gt;                                        # (b)\n        summarize(avgrent=weighted.mean(x=V2011, w=V0010, na.rm=TRUE)) |&gt;  # (c)\n        collect()                                                          # (d)\n\nhead(rent)\n\n# A tibble: 6 × 2\n  code_weighting avgrent\n  &lt;chr&gt;            &lt;dbl&gt;\n1 3503901003001     355.\n2 3503901003002     627.\n3 3503901003003     358.\n4 3505708005001     577.\n5 3505708005002     397.\n6 3505708005003     327.\n\n\nPor fim, podemos unir os dados espaciais com nossas estimativas de aluguel pela variável chave code_weighting, e mapear os resultados.\n\nrent_sf &lt;- left_join(wt_areas, rent, by = 'code_weighting')\n\nggplot() +\n  geom_sf(data = rent_sf, aes(fill = avgrent), color=NA) +\n  geom_sf(data = metro_muni, color='gray', fill=NA) +\n  scale_fill_distiller(palette = \"Greens\", direction = 1, \n                       name='Avgerage\\nRent in R$') +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nData cache\nNa primeira vez que o usuário executa uma função, o {censobr} fará o download do arquivo e o armazenará localmente. Dessa forma, os dados só precisam ser baixados uma vez. Quando o parâmetro cache está configurado como TRUE (Padrão), a função lerá os dados em cache, o que é muito mais rápido.\nOs usuários podem gerenciar os conjuntos de dados em cache usando a função censobr_cache(). Por exemplo, os usuários podem:\nListar arquivos em cache:\n\ncensobr_cache(list_files = TRUE)\n\nFiles currently chached:\n\n\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_households_v0.3.0.parquet\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_mortality_v0.3.0.parquet\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_population_v0.3.0.parquet\n\n\nDeletar um arquivo específico:\n\ncensobr_cache(delete_file = \"2010_emigration\")\n\nThe file '2010_emigration' is not cached.\n\n\nFiles currently chached:\n\n\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_households_v0.3.0.parquet\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_mortality_v0.3.0.parquet\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_population_v0.3.0.parquet\n\n\nDeletar todos arquivos do cache:\n\ncensobr_cache(delete_file = \"all\")\n\nAll files have been removed.\n\n\nFiles currently chached:\n\n\nC:\\Users\\user\\AppData\\Local/R/cache/R/censobr/data_release_v0.3.0/2010_population_v0.3.0.parquet\n\n\nPor padrão, os arquivos do {censobr} são salvos no diretório ‘User’. No entanto, os usuários podem executar a função set_censobr_cache_dir() para definir um diretório de cache personalizado. Note que essa definição personalizada precisa ser definida a cada nova sessão do R.\n\ntempf &lt;- tempdir()\n\nset_censobr_cache_dir(path = tempf)",
    "crumbs": [
      "3. Microdados"
    ]
  },
  {
    "objectID": "5_documentacao.html",
    "href": "5_documentacao.html",
    "title": "5. Documentação",
    "section": "",
    "text": "Além de funções para leitura dos dados, o pacote {censobr} traz ainda um conjunto de funções que permitem rápido acesso à documentação dos censos demográficos, incluindo os dicionários de variáveis, questionários e manual do entrevistador para envistas.\nTabela 2. Funções de documentação disponíveis no {censobr}\n    \n    \n    \n\n\n\nFunção\nDocumentação\nTipo\nDisponibilidade\n\n\n1960\n70\n80\n91\n2000\n10\n22\n\n\n\n\ndata_dictionary()\nDicionário de variáveis\nMicrodados\nem breve\nX\nX\n\nX\nX\nem breve\n\n\nAgregados de setores censitários\n\n\n\n\nX\nX\nem breve\n\n\nquestionnaire()\nQuestionários\nLongo e curto\nX\nX\nX\nX\nX\nX\nX\n\n\ninterview_manual()\nManual do entrevistador\n-\n\nX\nX\nX\nX\nX\nX\n\n\n\nTodas funções de documentação baixam os arquivos em formato .html ou .pdf, e abrem o documento no navegador (browser). Assim como as funções de leitura de dados do {censobr}, essas funções de documentação também salval os arquivos num cache local na primeira vez que a função é rodada. Assim, quando o usuário roda a função novamente, o pacote simplesmente carrega o arquivo local de maneira quase instantânea.\n\nDicionário de dados\nThe data_dictionary() indicate the definition of each variable, and the meaning of their categories in the case of categorical variables. The function currently covers the data dictionaries for all Brazilian censuses since 1970 (1970, 1980, 1991, 2000 and 2010), and it includes dictionaries for the variables of both microdata (sample portion of the census) and for the variables available in census tract-level aggregate data.\nA função data_dictionary() carrega o dicionário de variáveis, apontando a definição de cada variável e o significado de suas categorias no caso de variáveis categóricas. Atualmente, a função abrange os dicionários dos microdados da amostra para todos os censos brasileiros desde 1970 c(1970, 1980, 1991, 2000 e 2010). Além disso, a função também inclui os dicionários dos dados do universo agregados em setores censitário para os anos 2000 e 2010.\n\nlibrary(censobr)\n\n# dicionário de variáveis de pessoas (microdados da amostra)\ndata_dictionary(year = 2010, \n                dataset = 'population')\n\n# dicionário de variáveis de domicílios (microdados da amostra)\ndata_dictionary(year = 2010, \n                dataset = 'households')\n\n\n# dicionário de variáveis de setores censitários (agregados do universo)\ndata_dictionary(year = 2010, \n                dataset = 'tracts')\n\n\n\nQuestionários\nCom frequência, é importante se entender a estrutura e fluxo do questionário utilizado em pesquisas de coleta de dados. A função questionnaire() inclui os questionários utilizados na coleta de dados de todos os censos brasileiros desde 1960.\nAlém de passar o parâmetro year, o usuário precisa indicar o tipo de questionário de interesse, se o questionário curto do universo (type = 'short') ou o questionário longo utilizado na pesquisa amostra (type = 'long').\n\n# questionário curto da pesquisa do universo\nquestionnaire(year = 2010, \n              type = 'short')\n\n# questionário longo da pesquisa amostral\nquestionnaire(year = 2010, \n              type = 'long')\n\n\n\nManual do entrevistador\nPor fim, a função interview_manual() faz o download e abre no navegador o “Manual do Recenseador”, ou seja, o manual de instruções para os recenseadores do IBGE sobre como coletar os dados do censo. Estão disponíveis os manuais de todos os censos desde 1970.\n\n# Censo de 2010\ninterview_manual(year = 2010)\n\n# Censo de 1970\ninterview_manual(year = 1970)",
    "crumbs": [
      "5. Documentação"
    ]
  }
]